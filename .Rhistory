if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url[data_URL]\n",
"\"[dataname]\""
)
}
data_desc(self_res_att)
deparse(substitute(data))
data_doc <- function(data, filename = "data.R",
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = deparse(substitute(data))) {
nrow <- nrow(data)
ncol <- ncol(data)
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
}
data_doc(iris)
data_doc <- function(data, filename = "data.R",
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = deparse(substitute(data))) {
nrow <- nrow(data)
ncol <- ncol(data)
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
doc
}
data_doc(iris)
old_file_contents <- readLines(filename)
filename <- "datad.R"
doc
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
doc
title = "Data Title"
description = "Data Description"
vars = list()
data_URL = ""
dataname = NULL
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
cat(doc)
write(doc, filename)
old_file_contents <- readLines(filename)
old_file_contents
c(old_file_contents, doc)
write(c(old_file_contents, "\n\n", doc), filename)
readLines(filename)
data_doc <- function(data,
filename = NULL,
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris)
names(vars)
cnames
cnames <- colnames(data)
# check if missing vars
setdiff("oldbro", names(vars))
# check if missing vars
setdiff(c("oldbro", "c"), names(vars))
# check if missing vars
defined_names <- setdiff(cnames, names(vars))
defined_names
cnames
names(vars)
# check if missing vars
defined_names <- intersect(cnames, names(vars))
defined_names
c(vars, undefined_names)
# check if missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
undefined_names
c(vars, undefined_names)
data_doc <- function(data,
filename = NULL,
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
cnames <- colnames(data)
if (!length(vars)) vars <- cnames
if (is.null(names(vars))) names(vars) <- cnames
# check for missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
vars <- setNames(c(vars[defined_names], undefined_names),
c(defined_names, undefined_names))
vars <- vars[cnames] # ensure in same order as data
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal"))
data_doc <- function(data,
filename = NULL,
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
cnames <- colnames(data)
if (!length(vars)) vars <- cnames
if (is.null(names(vars))) names(vars) <- cnames
# check for missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
vars <- setNames(c(vars[defined_names], undefined_names),
c(defined_names, undefined_names))
vars <- vars[cnames] # ensure in same order as data
if (length(undefined_names)) {
message("These columns were not defined: ", paste(undefined_names, collapse = ", "))
}
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal"))
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal", a = "A"))
usethis::create_from_github("debruine/demopkg", "~/rproj/debruine")
devtools::install("../../debruine/demopkg/")
renv::snapshot()
devtools::install("../../debruine/demopkg/")
demopkg::apa_t_ind()
fullname <- function() {
# function code goes here
}
fullname <- function() {
# function code goes here
}
fullname()
fullname <- function(first, last, reverse = FALSE) {
if (reverse) {
name <- paste0(last, ", ", first)
} else {
name <- paste(first, last)
}
return(name)
}
fullname
fullname("Lisa", "DeBruine")
fullname("Lisa", "DeBruine", TRUE)
fullname("Lisa", "DeBruine")
fullname("Lisa", "DeBruine", reverse = TRUE)
data("self_res_att", package = "demopkg")
names(self_res_att) |> dput()
colnames <- names(self_res_att)
names(colnames) <- colnames
dput(colnames)
coldesc <- rep("", ncol(self_res_att))
names(coldesc) <- names(self_res_att)
dput(coldesc)
vars <- c(
"id" = "participant unique ID",
"sex" = "sex of the participant (male/female)",
"ethgroup" = "ethnic group of the participant (east_asian/west_asian/white)",
"age" = "age of the participant in years",
"m_non" = "mean number of times the other group members chose that male face as more attractive",
"f_non" = "mean number of times the other group members chose that female face as more attractive",
"m_self" = "number of times out of a possible 6 chose their male self-res face as more attractive",
"f_self" = "number of times out of a possible 6 chose their female self-res face as more attractive",
"grpsize" = "size of the group",
"group" = "unique group ID",
"mascpref" = "masculinity preference on an unrelated face preference task",
"obro" = "number of older brothers",
"osis" = "number of older sisters",
"ybro" = "number of younger brothers",
"ysis" = "number of younger sisters",
"birthorder" = "birth order (only/firstborn/middleborn/lastborn) as calculated from number of younger and older brothers and sisters"
)
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
data("self_res_att", package = "demopkg")
t_results <- t.test(
x = self_res_att$f_self,
y = self_res_att$f_non,
paired = TRUE)
t_results
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
str(t_results)
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
apa_t_pair <- function() {
}
apa_t_pair <- function() {
t_results <- t.test(self_res_att$f_self,
self_res_att$f_non,
paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
}
# run in the console
apa_t_pair()
rm(apa_t_pair)
# run in the console
apa_t_pair()
apa_t_pair <- function(x, y) {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
}
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(self_res_att$f_self), 1),
sd1     = round(sd(self_res_att$f_self), 1),
mean2   = round(mean(self_res_att$f_non), 1),
sd2     = round(sd(self_res_att$f_non), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic, 2),
p_value = round(t_results$p.value, 3)
)
apa_t_pair <- function(x, y) {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(x), 1),
sd1     = round(sd(x), 1),
mean2   = round(mean(y), 1),
sd2     = round(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic,2),
p_value = round(t_results$p.value, 3)
)
}
apa_t_pair()
x <- self_res_att$f_self
y <- self_res_att$f_non
apa_t_pair()
# run in the console or another file
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non)
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(self_res_att$f_self), 1),
sd1     = round(sd(self_res_att$f_self), 1),
mean2   = round(mean(self_res_att$f_non), 1),
sd2     = round(sd(self_res_att$f_non), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic, 2),
p_value = round(t_results$p.value, 3)
)
apa_t_pair <- function(x, y,
dv = "the DV",
level1 = "level 1",
level2 = "level 2") {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(
template,
mean1   = round(mean(x), 1),
sd1     = round(sd(x), 1),
mean2   = round(mean(y), 1),
sd2     = round(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic,2),
p_value = round(t_results$p.value, 3)
)
}
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non)
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non,
dv = "preferences for female faces",
level1 = "participants who resembled those faces",
level2 = "non-self participants")
apa_t_pair(x = self_res_att$m_self,
y = self_res_att$m_non,
dv = "preferences for male faces",
level1 = "participants who resembled those faces",
level2 = "non-self participants")
?demopkg::apa_t_pair
