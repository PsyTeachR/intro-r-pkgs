data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
if (!length(vars)) vars <- colnames(data)
if (is.null(names(vars))) names(vars) <- colnames(data)
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris)
names(vars)
cnames
cnames <- colnames(data)
# check if missing vars
setdiff("oldbro", names(vars))
# check if missing vars
setdiff(c("oldbro", "c"), names(vars))
# check if missing vars
defined_names <- setdiff(cnames, names(vars))
defined_names
cnames
names(vars)
# check if missing vars
defined_names <- intersect(cnames, names(vars))
defined_names
c(vars, undefined_names)
# check if missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
undefined_names
c(vars, undefined_names)
data_doc <- function(data,
filename = NULL,
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
cnames <- colnames(data)
if (!length(vars)) vars <- cnames
if (is.null(names(vars))) names(vars) <- cnames
# check for missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
vars <- setNames(c(vars[defined_names], undefined_names),
c(defined_names, undefined_names))
vars <- vars[cnames] # ensure in same order as data
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal"))
data_doc <- function(data,
filename = NULL,
title = "Data Title",
description = "Data Description",
vars = list(),
data_URL = "",
dataname = NULL) {
nrow <- nrow(data)
ncol <- ncol(data)
if (is.null(dataname)) dataname <- deparse(substitute(data))
cnames <- colnames(data)
if (!length(vars)) vars <- cnames
if (is.null(names(vars))) names(vars) <- cnames
# check for missing vars
defined_names <- intersect(cnames, names(vars))
undefined_names <- setdiff(cnames, names(vars))
vars <- setNames(c(vars[defined_names], undefined_names),
c(defined_names, undefined_names))
vars <- vars[cnames] # ensure in same order as data
if (length(undefined_names)) {
message("These columns were not defined: ", paste(undefined_names, collapse = ", "))
}
items <- glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
items <- paste(items, collapse = "\n")
doc <- glue::glue(.open = '[', .close = ']',
"#' [title].\n",
"#' \n",
"#' [description]\n",
"#' \n",
"#' @format A data frame with [nrow] rows and [ncol] variables:\n",
"#' \\describe{\n",
'[items]\n',
"#' }\n",
"#' @source \\url{[data_URL]}\n",
"\"[dataname]\""
)
if (is.null(filename)) {
cat(doc)
} else if (file.exists(filename)) {
old_file_contents <- readLines(filename)
write(c(old_file_contents, "\n\n", doc), filename)
message("Documentation appended to ", filename)
} else {
write(doc, filename)
message("Documentation written to ", filename)
}
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal"))
data_doc(iris, vars = c(Sepal.Length = "Length of Sepal", a = "A"))
usethis::create_from_github("debruine/demopkg", "~/rproj/debruine")
devtools::install("../../debruine/demopkg/")
renv::snapshot()
devtools::install("../../debruine/demopkg/")
demopkg::apa_t_ind()
fullname <- function() {
# function code goes here
}
fullname <- function() {
# function code goes here
}
fullname()
fullname <- function(first, last, reverse = FALSE) {
if (reverse) {
name <- paste0(last, ", ", first)
} else {
name <- paste(first, last)
}
return(name)
}
fullname
fullname("Lisa", "DeBruine")
fullname("Lisa", "DeBruine", TRUE)
fullname("Lisa", "DeBruine")
fullname("Lisa", "DeBruine", reverse = TRUE)
data("self_res_att", package = "demopkg")
names(self_res_att) |> dput()
colnames <- names(self_res_att)
names(colnames) <- colnames
dput(colnames)
coldesc <- rep("", ncol(self_res_att))
names(coldesc) <- names(self_res_att)
dput(coldesc)
vars <- c(
"id" = "participant unique ID",
"sex" = "sex of the participant (male/female)",
"ethgroup" = "ethnic group of the participant (east_asian/west_asian/white)",
"age" = "age of the participant in years",
"m_non" = "mean number of times the other group members chose that male face as more attractive",
"f_non" = "mean number of times the other group members chose that female face as more attractive",
"m_self" = "number of times out of a possible 6 chose their male self-res face as more attractive",
"f_self" = "number of times out of a possible 6 chose their female self-res face as more attractive",
"grpsize" = "size of the group",
"group" = "unique group ID",
"mascpref" = "masculinity preference on an unrelated face preference task",
"obro" = "number of older brothers",
"osis" = "number of older sisters",
"ybro" = "number of younger brothers",
"ysis" = "number of younger sisters",
"birthorder" = "birth order (only/firstborn/middleborn/lastborn) as calculated from number of younger and older brothers and sisters"
)
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
data("self_res_att", package = "demopkg")
t_results <- t.test(
x = self_res_att$f_self,
y = self_res_att$f_non,
paired = TRUE)
t_results
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
str(t_results)
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
apa_t_pair <- function() {
}
apa_t_pair <- function() {
t_results <- t.test(self_res_att$f_self,
self_res_att$f_non,
paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
}
# run in the console
apa_t_pair()
rm(apa_t_pair)
# run in the console
apa_t_pair()
apa_t_pair <- function(x, y) {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = mean(self_res_att$f_self) |> round(1),
sd1     = sd(self_res_att$f_self) |> round(1),
mean2   = mean(self_res_att$f_non) |> round(1),
sd2     = sd(self_res_att$f_non) |> round(1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = t_results$parameter |> round(1),
t_value = t_results$statistic |> round(2),
p_value = t_results$p.value |> round(3)
)
}
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(self_res_att$f_self), 1),
sd1     = round(sd(self_res_att$f_self), 1),
mean2   = round(mean(self_res_att$f_non), 1),
sd2     = round(sd(self_res_att$f_non), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic, 2),
p_value = round(t_results$p.value, 3)
)
apa_t_pair <- function(x, y) {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(x), 1),
sd1     = round(sd(x), 1),
mean2   = round(mean(y), 1),
sd2     = round(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic,2),
p_value = round(t_results$p.value, 3)
)
}
apa_t_pair()
x <- self_res_att$f_self
y <- self_res_att$f_non
apa_t_pair()
# run in the console or another file
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non)
glue::glue(
template,
dv      = "preferences for female faces",
level1  = "participants who resembled those faces",
level2  = "non-self participants",
mean1   = round(mean(self_res_att$f_self), 1),
sd1     = round(sd(self_res_att$f_self), 1),
mean2   = round(mean(self_res_att$f_non), 1),
sd2     = round(sd(self_res_att$f_non), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic, 2),
p_value = round(t_results$p.value, 3)
)
apa_t_pair <- function(x, y,
dv = "the DV",
level1 = "level 1",
level2 = "level 2") {
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(
template,
mean1   = round(mean(x), 1),
sd1     = round(sd(x), 1),
mean2   = round(mean(y), 1),
sd2     = round(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round(t_results$parameter, 1),
t_value = round(t_results$statistic,2),
p_value = round(t_results$p.value, 3)
)
}
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non)
apa_t_pair(x = self_res_att$f_self,
y = self_res_att$f_non,
dv = "preferences for female faces",
level1 = "participants who resembled those faces",
level2 = "non-self participants")
apa_t_pair(x = self_res_att$m_self,
y = self_res_att$m_non,
dv = "preferences for male faces",
level1 = "participants who resembled those faces",
level2 = "non-self participants")
?demopkg::apa_t_pair
# if you haven't added the data yet, use this code:
self_res_att <- read.csv("https://osf.io/download/3c5s4/")
# if you haven't added the data yet, use this code:
self_res_att <- read.csv("https://raw.githubusercontent.com/PsyTeachR/intro-r-pkgs/main/data-raw/DeBruine_2004_PRSLB_att.csv")
formatC(3/17)
formatC(3/17, 3)
formatC(1.0000001, 3)
formatC(1.9999999, 3)
formatC(1.9999999, 3, zero.print = TRUE)
formatC(1.9999999, 3, zero.print = FALSE)
formatC(1.9999999, 3, zero.print = 's')
formatC(1.099, 3, zero.print = 's')
formatC(1.09, 3, zero.print = 's')
formatC(1.00, 3)
formatC(1.00, digits = 3)
formatC(1.00, 3)
?formatC
formatC(1.00, 3, flag = "0")
formatC(1.00, 3, drop0trailing = FALSE)
prettyNum(1.00, 3, drop0trailing = FALSE)
prettyNum(1.00, digits = 3, drop0trailing = FALSE)
sprintf("%.3f", 1.00000000)
sprintf("%.3f", 1.99999)
sprintf
?formatC
x <- 1.99999
digits <- 3
sprintf("%.3f", x)
fmt <- paste0("%.", digits, "f")
round0 <- function(x, digits = 0) {
fmt <- paste0("%.", digits, "f")
x0 <- sprintf(fmt, x)
return(x0)
}
round0
round0(PI, 3)
round0(pi, 3)
round0(1.9999, 2)
round0(1, 3)
round0(1.9999, 2)
round0(7/3, 3)
round0(1.9999, 2)
round0
?round
?sprintf
round0(1, 3)
rm(round0)
round0(1, 3)
demopkg:::round0(1, 3)
devtools::install("../../debruine/demopkg/")
demopkg:::round0(1, 3)
# define apa_t_pair and round0 from last chapter
apa_t_pair <- function(x, y,
dv = "the DV",
level1 = "level 1",
level2 = "level 2") {
# warn about identical values
if (all(x == y)) {
warning("The values for x and y should probably not be identical.")
}
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
# p <- if (t_results$p.value < .001) {
#   "p < .001"
# } else {
#   paste("p =", round0(t_results$p.value, 3))
# }
glue::glue(
template,
mean1   = round0(mean(x), 1),
sd1     = round0(sd(x), 1),
mean2   = round0(mean(y), 1),
sd2     = round0(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round0(t_results$parameter, 0),
t_value = round0(t_results$statistic, 2),
p_value = round0(t_results$p.value, 3)
)
}
round0 <- function(x, digits = 0) {
fmt <- paste0("%.", digits, "f")
x0 <- sprintf(fmt, x)
return(x0)
}
library(usethis)
library(testthat)
test_that("defaults", {
})
test_that("defaults", {
x <- c(1,2,3,4,5)
y <- c(2,3,2,5,6)
result <- apa_t_pair(x, y)
expected <- "A paired-samples t-test was conducted to compare the DV between level 1 (M = 3, SD = 1.6) and level 2 (M = 3.6, SD = 1.8). There was a non-significant difference; t(4) = -1.5, p = 0.208."
expect_equal(result, expected)
})
test_that("defaults", {
x <- c(1,2,3,4,5)
y <- c(2,3,2,5,6)
result <- apa_t_pair(x, y)
expected <- "A paired-samples t-test was conducted to compare the DV between level 1 (M = 3.0, SD = 1.6) and level 2 (M = 3.6, SD = 1.8). There was a non-significant difference; t(4) = -1.50, p = 0.208."
expect_equal(result, expected)
})
test_that("defaults-sig", {
x <- c(1,2,1,3,1)
y <- c(5,3,2,5,6)
result <- apa_t_pair(x, y)
expected <- "A paired-samples t-test was conducted to compare the DV between level 1 (M = 1.6, SD = 0.9) and level 2 (M = 4.2, SD = 1.6). There was a significant difference; t(4) = -3.20, p = 0.033."
expect_equal(result, expected)
})
test_that("non-defaults", {
x <- c(1,2,1,3,1)
y <- c(5,3,2,5,6)
result <- apa_t_pair(x, y, dv = "the score", "Group A", "Group B")
expected <- "A paired-samples t-test was conducted to compare the score between Group A (M = 1.6, SD = 0.9) and Group B (M = 4.2, SD = 1.6). There was a significant difference; t(4) = -3.20, p = 0.033."
expect_equal(result, expected)
})
test_that("same x and y", {
x <- c(1,2,1,4,1)
expect_warning( apa_t_pair(x, x) )
})
apa_t_pair <- function(x, y,
dv = "the DV",
level1 = "level 1",
level2 = "level 2") {
# warn about identical values
if (all(x == y)) {
warning("The values for x and y should probably not be identical.")
}
t_results <- t.test(x, y, paired = TRUE)
template <- "A paired-samples t-test was conducted to compare {dv} between {level1} (M = {mean1}, SD = {sd1}) and {level2} (M = {mean2}, SD = {sd2}). There was a {non}significant difference; t({df}) = {t_value}, p = {p_value}."
glue::glue(
template,
mean1   = round0(mean(x), 1),
sd1     = round0(sd(x), 1),
mean2   = round0(mean(y), 1),
sd2     = round0(sd(y), 1),
non     = ifelse(t_results$p.value < .05, "", "non-"),
df      = round0(t_results$parameter, 0),
t_value = round0(t_results$statistic, 2),
p_value = round0(t_results$p.value, 3)
)
}
test_that("same x and y", {
x <- c(1,2,1,4,1)
y <- c(5,3,2,5,6)
expect_warning( apa_t_pair(x, x) )
})
usethis::create_from_github("debruine/demopkg", "../../debruine/")
renv::status()
webexercises::add_to_bookdown()
usethis::git_vaccinate()
