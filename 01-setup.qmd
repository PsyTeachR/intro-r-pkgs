# Setting up {#sec-setup}

```{r, include = FALSE}
source("R/setup.R")
```

[Recording](https://uofglasgow.zoom.us/rec/share/mxeupKeSgQ7ZekH86RV1UQ-4ROAv6xQoJRB7G2Z7lnLovcTGdVVs39mRb1q7cvZn.UYy6h6E6Sc6xOCOr) (passcode: `codingclub22!`)

Create a package project and edit the default files. We'll start using the most helpful package, usethis.

Today we'll be using the following `r glossary("package", "packages")`, so install them if necessary:

```{r install, eval = FALSE}
# packages required for this chapter

library(usethis)
library(devtools)
```

You may need to download some other files to allow you to compile packages if you've never installed a package "from source" before. If you're a Windows user, you'll need [RTools](https://cran.r-project.org/bin/windows/Rtools); download and install the recommended version. If you're a Mac user, you'll need [XCode Tools](https://www.freecodecamp.org/news/install-xcode-command-line-tools/), which you can install by opening the Terminal tab in RStudio (or opening the Terminal application) and typing the following at the command line: `xcode-select --install`.

Additionally, you may need to install LaTeX to make PDF versions of the code documentation. The tinytex package is usually the easiest way to do this.

```{r, eval = FALSE, filename="run in the console"}
install.packages("tinytex")
tinytex::install_tinytex()
```


## Create your R package

Use the following command to create the framework for a new package called `demopkg`. Set the path `r glossary("argument")` to the path where you want to save your package. The last section of the path should be the name of the package: `demopkg`.

```{r create-package, eval = FALSE, filename="run in the console"}
usethis::create_package(path = "~/rproj/demopkg")
```

::: {.warning}
Package names can only be letters, numbers, and full stops.
:::

You'll see the following output, and a new RStudio `r glossary("project")` will open up. You can close the old window now and just work in this project.

::: {.cell-output}
```
✔ Creating '/Users/lisad/rproj/demopkg/'
✔ Setting active project to '/Users/lisad/rproj/demopkg'
✔ Creating 'R/'
✔ Writing 'DESCRIPTION'
Package: demopkg
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R (parsed):
    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to
    pick a license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.0
✔ Writing 'NAMESPACE'
✔ Writing 'demopkg.Rproj'
✔ Adding '^demopkg\\.Rproj$' to '.Rbuildignore'
✔ Adding '.Rproj.user' to '.gitignore'
✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
✔ Opening '/Users/lisad/rproj/demopkg/' in new RStudio session
✔ Setting active project to '<no active project>'
```
:::


### Edit the DESCRIPTION file

Open the `DESCRIPTION` file. It should look like this:

```{yaml, filename = "DESCRIPTION"}
Package: demopkg
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R: 
    person("First", "Last", , "first.last@example.com", role = c("aut", "cre"),
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.0
```

Change the title, authors, and description to your own information. If your package has multiple authors, add them as a vector like this. You can also add your [ORCiD](https://orcid.org/).

```{yaml, filename = "DESCRIPTION"}
Authors@R: c(
    person(given = "Lisa",
           family = "DeBruine",
           role = c("aut", "cre"),
           email = "debruine@gmail.com",
           comment = c(ORCID = "0000-0002-7523-5539")),
    person(given = "Firstname",
           family = "Lastname",
           role = c("aut"),
           email = "person@gmail.com",
           comment = c(ORCID = "0000-0000-0000-000X")))
```

Also add the date like this. The date is used to create an automatic citation for your package.

```{yaml, filename = "DESCRIPTION"}
Package: demopkg
Date: 2022-10-05
```


### Create a LICENSE

Make sure you've saved any changes to the `DESCRIPTION` file first, as adding a license will modify that file. Add a license using one of the following options:

```{r license, eval = FALSE, filename="run one in the console"}

# more common for study or data packages
usethis::use_ccby_license() # reusable with citation
usethis::use_cc0_license()  # public domain

# more common for function packages
usethis::use_mit_license()  # permissive sharing
usethis::use_gpl3_license() # derivatives must be open
```

See <https://choosealicense.com> for more details and other options.

### Create a README

Use the following code to set up a `r glossary("README")` document that will explain how to install and use your package.

```{r readme, eval = FALSE, filename="run in the console"}
usethis::use_readme_rmd() 
```

We'll eventually put this on `r glossary("github")`, so change the installation instructions to the following (change `yourusername` to your github username). 

```` md
You can install demopkg from [GitHub](https://github.com) with:

```{{r}}
devtools::install_github("yourusername/demopkg")
```
````

Delete the example for now.

::: {.warning}
Make sure you knit your README.Rmd file when you update it and never edit the README.md file (that's just for github).
:::

We'll make a full-featured pkgdown website in @sec-pkgdown, so we don't need too many details here.

## Install the package

This package doesn't do much yet, but you can install it. Go to the Build tab of the upper right pane and click the install button (or type `devtools::install()` in the console). You should get some output that looks like this:

::: {.cell-output}
```
* installing to library ‘/Library/Frameworks/R.framework/Versions/4.2/Resources/library’
* installing *source* package ‘demopkg’ ...
** using staged installation
No man pages found in package  ‘demopkg’ 
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (demopkg)
```
:::

Now you should be able to see `demopkg` in your Packages tab, load it with the `library()` function, and get a citation.

```{r, filename="run in the console"}
citation("demopkg")
```


## Glossary

```{r, echo = FALSE, results='asis'}
glossary_table(as_kable = FALSE) |> 
  kableExtra::kable(row.names = FALSE, escape = FALSE) |>
  unclass() |> cat()
```

## Further Practice

1. Set up another package for your own data and analysis. 
