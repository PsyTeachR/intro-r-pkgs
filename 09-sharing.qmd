# Sharing your package {#sec-sharing}

Set up a github account and make a package repository to share your package and pkgdown website.

```{r}
library(usethis)
```

## Set up git

If your project doesn't already use git, set it up with this function:

```{r, eval = FALSE}
usethis::use_git()
```

It will list all of your files and ask if it's OK to commit them. Choose the affirmative option (e.g., "Yes", "Absolutely", "Yeah"). 

It will than ask "• A restart of RStudio is required to activate the Git pane Restart now?". Choose the affirmative option and wait for the restart.

## Set up GitHub

Now, set up your github repository. If you don't already have a github account, you need to make one first. Then enter this function into the console.

```{r, eval = FALSE}
# paste into the console
usethis::create_github_token()
```

It will open up a website where you can set the name of the computer you're using this token on. You're meant to set it to expire for security purposes, but you can also set it up without an expiry date. 

::: {.light-mode}
![](images/github-token.png)
:::

::: {.dark-mode}
![](images/github-token-dark.png)
:::

After you set up your token, make sure to copy the value (if you forget and close the window, you can just make another token). Type the following code into the console and follow the instructions to set your token.

```{r, eval = FALSE}
# enter into the console and follow instructions
gitcreds::gitcreds_set()
```

If you think you've already done this in the past, or have just set it up, double check with this function:

```{r}
usethis::gh_token_help()
```

## Add Repository

Now we can add this project to your github repositories.

```{r, eval = FALSE}
usethis::use_github()
```

::: {.cell-output}
```
ℹ Defaulting to 'https' Git protocol
✔ Setting active project to '/Users/lisad/rproj/demopkg'
✔ Creating GitHub repository 'debruine/demopkg'
✔ Setting remote 'origin' to 'https://github.com/debruine/demopkg.git'
✔ Setting URL field in DESCRIPTION to 'https://github.com/debruine/demopkg'
✔ Setting BugReports field in DESCRIPTION to 'https://github.com/debruine/demopkg/issues'
There is 1 uncommitted file:
* 'DESCRIPTION'
Is it ok to commit it?
```
:::

Allow usethis to commit any uncommitted files.

::: {.cell-output}
```
✔ Adding files
✔ Making a commit with message 'Add GitHub links to DESCRIPTION'
✔ Pushing 'main' branch to GitHub and setting 'origin/main' as upstream branch
✔ Opening URL 'https://github.com/debruine/demopkg'
```
:::

Your web browser should open up the page <https://github.com/yourusername/demopkg>

## Add a README

All repositories need a README. R package repositories tend to follow a pattern that the following function will set up.

```{r, eval = FALSE}
usethis::use_readme_rmd()
```

Edit the goal of the package. You can use text from the DESCRIPTION file.

```
The goal of demopkg is to provide data and analysis code for the paper "Facial resemblance increases the attractiveness of same-sex faces more than other-sex faces" (DeBruine, 2004).
```

Delete everything under the Example heading and add some example code, such as showing an analysis with `apa_t_pair()`. 

Now save and knit the .Rmd file, which will create a  file called `README.md`. Don't ever edit this file, just create it with the .Rmd file.

## Commit and push changes

Go into the Git tab in the upper right pane. You should see a list of files that have changes, including the README files. 

Select them all and click on the staged checkboxes, then click "Commit".

:::{.light-mode}
![](images/git-commit.png)
:::

:::{.dark-mode}
![](images/git-commit-dark.png)
:::

Write a commit statement like "added README" and click the Commit button. You should see a popup that end with text like this:

:::{.terminal}
```
>>> /usr/local/git/bin/git commit -F /var/folders/6w/y3tyzgs1403cz7tgw8k4lk600000gq/T/Rtmpi8M1q2/git-commit-message-45a77cb49a7b.txt
[main 19dfbb3] added README
 3 files changed, 111 insertions(+)
 create mode 100644 README.Rmd
 create mode 100644 README.md
```
:::

If there were no errors, you can close this box and the review changes interface.

A "commit" creates a snapshot of your project on your computer, so you can always go back to this version, but it doesn't update the version on the web. For that, you need to "push". Click the green up arrow in the git pane. 

You'll see a popup with text like this:

:::{.terminal}
```
>>> /usr/local/git/bin/git push origin HEAD:refs/heads/main
To https://github.com/debruine/demopkg.git
   4cbc523..19dfbb3  HEAD -> main
```
:::

If there were no error message, go ahead and close this.

## Terminal 

You may prefer interacting with git via the command line. If not, you can skip this section. 

Add something to the README and re-knit to create changes. Then go to the Terminal in the console pane and type `git status`. You should see output like this, with the changed files in red.

:::{.terminal}
```
(base) ~/rproj/demopkg > git status
On branch main
Your branch is up-to-date with 'origin/main'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   README.Rmd
        modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")
```
:::

This shows you a list of what files have changes. Stage all of the files for committing with `git add *`. Now if you run `git status`, the changed files will be green, which means they're ready to commit.

Commit them to your local machine with `git commit -m "Updates to README"`. The `-m` signals that the next thing in quotes will be the commit message.

:::{.terminal}
```
(base) ~/rproj/demopkg > git commit -m "Updates to README"
[main 5ae4e39] Updates to README
 2 files changed, 2 insertions(+), 2 deletions(-)
```
:::

Send the commit to the web version with `git push`.

:::{.terminal}
```
(base) ~/rproj/demopkg > git push
Counting objects: 4, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 437 bytes | 0 bytes/s, done.
Total 4 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To https://github.com/debruine/demopkg.git
   19dfbb3..5ae4e39  main -> main
```
:::

TL;DR:

``` bash
git status
git add *
git commit -m "README updates"
git push
```

## Further Resources

* [Happy Git with R]() @happy-git
